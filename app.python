from flask import Flask, render_template, request, jsonify

import math

app = Flask(__name__)

@app.route('/')
def index():
    """Render the main page with the map."""
    return render_template('index.html')

@app.route('/calculate_distance', methods=['POST'])
def calculate_distance():
    """Calculate the distance of a route."""
    # This will be implemented later to calculate route distances
    route_points = request.json.get('points', [])
    
    # Placeholder for distance calculation
    # We'll add actual calculation logic later
    distance = 0
    
    return jsonify({
        'distance': distance,
        'unit': 'kilometers'
    })

@app.route('/suggest_routes', methods=['POST'])
def suggest_routes():
    """Suggest routes based on start point and desired distance."""
    data = request.json
    start_point = data.get('start_point', {})
    desired_distance = float(data.get('distance', 5))  # Default to 5km
    
    # Extract start coordinates
    start_lat = start_point.get('lat', 51.505)  # Default to London coordinates
    start_lng = start_point.get('lng', -0.09)
    
    # Generate routes
    suggested_routes = generate_routes(start_lat, start_lng, desired_distance)
    
    return jsonify({
        'routes': suggested_routes
    })

def generate_routes(start_lat, start_lng, target_distance):
    """
    Generate several potential running routes from a starting point
    with approximately the target distance.
    """
    # Generate 3 sample routes with slightly different distances
    routes = []
    
    for i in range(3):
        # Create a simple loop route
        angle_offset = i * 120  # Space routes evenly around starting point
        waypoints = []
        
        # Starting point
        waypoints.append({"lat": start_lat, "lng": start_lng})
        
        # Create route legs
        leg_distance = target_distance / 4  # Divide into segments
        
        # Create four points to form a loop
        for j in range(1, 4):
            angle = (angle_offset + j * 90) % 360
            lat_offset = math.sin(math.radians(angle)) * 0.009 * leg_distance
            lng_offset = math.cos(math.radians(angle)) * 0.015 * leg_distance
            
            waypoints.append({
                "lat": start_lat + lat_offset,
                "lng": start_lng + lng_offset
            })
        
        # Close the loop
        waypoints.append({"lat": start_lat, "lng": start_lng})
        
        # Calculate approximate distance (simplified)
        calculated_distance = target_distance * (0.9 + i * 0.1)  # Vary slightly
        
        routes.append({
            "id": i + 1,
            "name": f"Route {i + 1}",
            "waypoints": waypoints,
            "distance": round(calculated_distance, 2),
            "type": ["Loop", "Out-and-back", "Circuit"][i % 3]
        })
    
    return routes

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080, debug=True)  # Added debug=True for more detailed error messages
